// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: userstore.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UserStoreHubService_Communicate_FullMethodName = "/UserStoreHubService/communicate"
)

// UserStoreHubServiceClient is the client API for UserStoreHubService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserStoreHubServiceClient interface {
	Communicate(ctx context.Context, opts ...grpc.CallOption) (UserStoreHubService_CommunicateClient, error)
}

type userStoreHubServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserStoreHubServiceClient(cc grpc.ClientConnInterface) UserStoreHubServiceClient {
	return &userStoreHubServiceClient{cc}
}

func (c *userStoreHubServiceClient) Communicate(ctx context.Context, opts ...grpc.CallOption) (UserStoreHubService_CommunicateClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UserStoreHubService_ServiceDesc.Streams[0], UserStoreHubService_Communicate_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &userStoreHubServiceCommunicateClient{ClientStream: stream}
	return x, nil
}

type UserStoreHubService_CommunicateClient interface {
	Send(*RemoteMessage) error
	Recv() (*RemoteMessage, error)
	grpc.ClientStream
}

type userStoreHubServiceCommunicateClient struct {
	grpc.ClientStream
}

func (x *userStoreHubServiceCommunicateClient) Send(m *RemoteMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userStoreHubServiceCommunicateClient) Recv() (*RemoteMessage, error) {
	m := new(RemoteMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserStoreHubServiceServer is the server API for UserStoreHubService service.
// All implementations must embed UnimplementedUserStoreHubServiceServer
// for forward compatibility
type UserStoreHubServiceServer interface {
	Communicate(UserStoreHubService_CommunicateServer) error
	mustEmbedUnimplementedUserStoreHubServiceServer()
}

// UnimplementedUserStoreHubServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserStoreHubServiceServer struct {
}

func (UnimplementedUserStoreHubServiceServer) Communicate(UserStoreHubService_CommunicateServer) error {
	return status.Errorf(codes.Unimplemented, "method Communicate not implemented")
}
func (UnimplementedUserStoreHubServiceServer) mustEmbedUnimplementedUserStoreHubServiceServer() {}

// UnsafeUserStoreHubServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserStoreHubServiceServer will
// result in compilation errors.
type UnsafeUserStoreHubServiceServer interface {
	mustEmbedUnimplementedUserStoreHubServiceServer()
}

func RegisterUserStoreHubServiceServer(s grpc.ServiceRegistrar, srv UserStoreHubServiceServer) {
	s.RegisterService(&UserStoreHubService_ServiceDesc, srv)
}

func _UserStoreHubService_Communicate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserStoreHubServiceServer).Communicate(&userStoreHubServiceCommunicateServer{ServerStream: stream})
}

type UserStoreHubService_CommunicateServer interface {
	Send(*RemoteMessage) error
	Recv() (*RemoteMessage, error)
	grpc.ServerStream
}

type userStoreHubServiceCommunicateServer struct {
	grpc.ServerStream
}

func (x *userStoreHubServiceCommunicateServer) Send(m *RemoteMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userStoreHubServiceCommunicateServer) Recv() (*RemoteMessage, error) {
	m := new(RemoteMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserStoreHubService_ServiceDesc is the grpc.ServiceDesc for UserStoreHubService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserStoreHubService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UserStoreHubService",
	HandlerType: (*UserStoreHubServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "communicate",
			Handler:       _UserStoreHubService_Communicate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "userstore.proto",
}

const (
	RemoteUserStoreService_InvokeUserStore_FullMethodName = "/RemoteUserStoreService/invokeUserStore"
)

// RemoteUserStoreServiceClient is the client API for RemoteUserStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemoteUserStoreServiceClient interface {
	InvokeUserStore(ctx context.Context, in *UserStoreRequest, opts ...grpc.CallOption) (*UserStoreResponse, error)
}

type remoteUserStoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteUserStoreServiceClient(cc grpc.ClientConnInterface) RemoteUserStoreServiceClient {
	return &remoteUserStoreServiceClient{cc}
}

func (c *remoteUserStoreServiceClient) InvokeUserStore(ctx context.Context, in *UserStoreRequest, opts ...grpc.CallOption) (*UserStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserStoreResponse)
	err := c.cc.Invoke(ctx, RemoteUserStoreService_InvokeUserStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteUserStoreServiceServer is the server API for RemoteUserStoreService service.
// All implementations must embed UnimplementedRemoteUserStoreServiceServer
// for forward compatibility
type RemoteUserStoreServiceServer interface {
	InvokeUserStore(context.Context, *UserStoreRequest) (*UserStoreResponse, error)
	mustEmbedUnimplementedRemoteUserStoreServiceServer()
}

// UnimplementedRemoteUserStoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRemoteUserStoreServiceServer struct {
}

func (UnimplementedRemoteUserStoreServiceServer) InvokeUserStore(context.Context, *UserStoreRequest) (*UserStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvokeUserStore not implemented")
}
func (UnimplementedRemoteUserStoreServiceServer) mustEmbedUnimplementedRemoteUserStoreServiceServer() {
}

// UnsafeRemoteUserStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoteUserStoreServiceServer will
// result in compilation errors.
type UnsafeRemoteUserStoreServiceServer interface {
	mustEmbedUnimplementedRemoteUserStoreServiceServer()
}

func RegisterRemoteUserStoreServiceServer(s grpc.ServiceRegistrar, srv RemoteUserStoreServiceServer) {
	s.RegisterService(&RemoteUserStoreService_ServiceDesc, srv)
}

func _RemoteUserStoreService_InvokeUserStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteUserStoreServiceServer).InvokeUserStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteUserStoreService_InvokeUserStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteUserStoreServiceServer).InvokeUserStore(ctx, req.(*UserStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RemoteUserStoreService_ServiceDesc is the grpc.ServiceDesc for RemoteUserStoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemoteUserStoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RemoteUserStoreService",
	HandlerType: (*RemoteUserStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "invokeUserStore",
			Handler:    _RemoteUserStoreService_InvokeUserStore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userstore.proto",
}
