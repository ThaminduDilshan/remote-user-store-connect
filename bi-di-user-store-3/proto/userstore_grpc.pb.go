// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: userstore.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	RemoteUserStore_Communicate_FullMethodName = "/RemoteUserStore/communicate"
)

// RemoteUserStoreClient is the client API for RemoteUserStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemoteUserStoreClient interface {
	Communicate(ctx context.Context, opts ...grpc.CallOption) (RemoteUserStore_CommunicateClient, error)
}

type remoteUserStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteUserStoreClient(cc grpc.ClientConnInterface) RemoteUserStoreClient {
	return &remoteUserStoreClient{cc}
}

func (c *remoteUserStoreClient) Communicate(ctx context.Context, opts ...grpc.CallOption) (RemoteUserStore_CommunicateClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RemoteUserStore_ServiceDesc.Streams[0], RemoteUserStore_Communicate_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &remoteUserStoreCommunicateClient{ClientStream: stream}
	return x, nil
}

type RemoteUserStore_CommunicateClient interface {
	Send(*RemoteMessage) error
	Recv() (*RemoteMessage, error)
	grpc.ClientStream
}

type remoteUserStoreCommunicateClient struct {
	grpc.ClientStream
}

func (x *remoteUserStoreCommunicateClient) Send(m *RemoteMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *remoteUserStoreCommunicateClient) Recv() (*RemoteMessage, error) {
	m := new(RemoteMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RemoteUserStoreServer is the server API for RemoteUserStore service.
// All implementations must embed UnimplementedRemoteUserStoreServer
// for forward compatibility
type RemoteUserStoreServer interface {
	Communicate(RemoteUserStore_CommunicateServer) error
	mustEmbedUnimplementedRemoteUserStoreServer()
}

// UnimplementedRemoteUserStoreServer must be embedded to have forward compatible implementations.
type UnimplementedRemoteUserStoreServer struct {
}

func (UnimplementedRemoteUserStoreServer) Communicate(RemoteUserStore_CommunicateServer) error {
	return status.Errorf(codes.Unimplemented, "method Communicate not implemented")
}
func (UnimplementedRemoteUserStoreServer) mustEmbedUnimplementedRemoteUserStoreServer() {}

// UnsafeRemoteUserStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoteUserStoreServer will
// result in compilation errors.
type UnsafeRemoteUserStoreServer interface {
	mustEmbedUnimplementedRemoteUserStoreServer()
}

func RegisterRemoteUserStoreServer(s grpc.ServiceRegistrar, srv RemoteUserStoreServer) {
	s.RegisterService(&RemoteUserStore_ServiceDesc, srv)
}

func _RemoteUserStore_Communicate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RemoteUserStoreServer).Communicate(&remoteUserStoreCommunicateServer{ServerStream: stream})
}

type RemoteUserStore_CommunicateServer interface {
	Send(*RemoteMessage) error
	Recv() (*RemoteMessage, error)
	grpc.ServerStream
}

type remoteUserStoreCommunicateServer struct {
	grpc.ServerStream
}

func (x *remoteUserStoreCommunicateServer) Send(m *RemoteMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *remoteUserStoreCommunicateServer) Recv() (*RemoteMessage, error) {
	m := new(RemoteMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RemoteUserStore_ServiceDesc is the grpc.ServiceDesc for RemoteUserStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemoteUserStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RemoteUserStore",
	HandlerType: (*RemoteUserStoreServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "communicate",
			Handler:       _RemoteUserStore_Communicate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "userstore.proto",
}

const (
	RemoteServer_InvokeUserStore_FullMethodName = "/RemoteServer/invokeUserStore"
)

// RemoteServerClient is the client API for RemoteServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemoteServerClient interface {
	InvokeUserStore(ctx context.Context, in *UserStoreRequest, opts ...grpc.CallOption) (*UserStoreResponse, error)
}

type remoteServerClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteServerClient(cc grpc.ClientConnInterface) RemoteServerClient {
	return &remoteServerClient{cc}
}

func (c *remoteServerClient) InvokeUserStore(ctx context.Context, in *UserStoreRequest, opts ...grpc.CallOption) (*UserStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserStoreResponse)
	err := c.cc.Invoke(ctx, RemoteServer_InvokeUserStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteServerServer is the server API for RemoteServer service.
// All implementations must embed UnimplementedRemoteServerServer
// for forward compatibility
type RemoteServerServer interface {
	InvokeUserStore(context.Context, *UserStoreRequest) (*UserStoreResponse, error)
	mustEmbedUnimplementedRemoteServerServer()
}

// UnimplementedRemoteServerServer must be embedded to have forward compatible implementations.
type UnimplementedRemoteServerServer struct {
}

func (UnimplementedRemoteServerServer) InvokeUserStore(context.Context, *UserStoreRequest) (*UserStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvokeUserStore not implemented")
}
func (UnimplementedRemoteServerServer) mustEmbedUnimplementedRemoteServerServer() {}

// UnsafeRemoteServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoteServerServer will
// result in compilation errors.
type UnsafeRemoteServerServer interface {
	mustEmbedUnimplementedRemoteServerServer()
}

func RegisterRemoteServerServer(s grpc.ServiceRegistrar, srv RemoteServerServer) {
	s.RegisterService(&RemoteServer_ServiceDesc, srv)
}

func _RemoteServer_InvokeUserStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteServerServer).InvokeUserStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteServer_InvokeUserStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteServerServer).InvokeUserStore(ctx, req.(*UserStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RemoteServer_ServiceDesc is the grpc.ServiceDesc for RemoteServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemoteServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RemoteServer",
	HandlerType: (*RemoteServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "invokeUserStore",
			Handler:    _RemoteServer_InvokeUserStore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userstore.proto",
}
